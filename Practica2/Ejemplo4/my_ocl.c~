#include <stdio.h>
#include "my_ocl.h"
#include "CL/cl.h"


void remove_noiseOCL(float *im, float *image_out, 
	float thredshold, int window_size,
	int height, int width)
{

	cl_device_id device_id;
	cl_context context;
	cl_command_queue command_queue;
	cl_program program;
	cl_kernel kernel;

	cl_int err;

	cl_mem imageCL;
	cl_mem imageCLOUT;

	size_t global[2];

	FILE *fp;
	long filelen;
	long readlen;
	char *kernel_src;

	// read the kernel
	fp = fopen("rmnoise.cl","r");
	fseek(fp,0L, SEEK_END);
	filelen = ftell(fp);
	rewind(fp);

	kernel_src = malloc(sizeof(char)*(filelen+1));
	readlen = fread(kernel_src,1,filelen,fp);
	if(readlen!= filelen)
	{
		printf("error reading file\n");
		exit(1);
	}
	
	// ensure the string is NULL terminated
	kernel_src[filelen]='\0';

	cl_uint numPlatforms;

	// Find number of platforms
	err = clGetPlatformIDs(0, NULL, &numPlatforms);
	if (err != CL_SUCCESS || numPlatforms <= 0)
	{
		printf("Error: Failed to find a platform!\n");
		//return EXIT_FAILURE;
	}

	// Get all platforms
	cl_platform_id Platform[numPlatforms];
	err = clGetPlatformIDs(numPlatforms, Platform, NULL);
	if (err != CL_SUCCESS || numPlatforms <= 0)
	{
		printf("Error: Failed to get the platform!\n");
        	//return EXIT_FAILURE;
	}

	int i;
	// Secure a GPU
	for (i = 0; i < numPlatforms; i++)
	{
     	   	err = clGetDeviceIDs(Platform[i], DEVICE, 1, &device_id, NULL);
        	if (err == CL_SUCCESS)
        	{
            		break;
       		}
   	}

	if (device_id == NULL)
	{
		printf("Error: Failed to create a device group!\n");
		//return EXIT_FAILURE;
	}
  
	// Create a compute context 
	context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);
	if (!context)
    	{
        	printf("Error: Failed to create a compute context!\n");
        	//return EXIT_FAILURE;
   	}

	// Create a command queue
	command_queue = clCreateCommandQueue(context, device_id, 0, &err);
	if (!command_queue)
	{
        	printf("Error: Failed to create a command commands!\n");
        	//return EXIT_FAILURE;
	}

	// create program object from source. 
	// kernel_src contains source read from file earlier
	program = clCreateProgramWithSource(context, 1 ,(const char **)
                                          &kernel_src, NULL, &err);
	if (err != CL_SUCCESS)
	{	
		printf("Unable to create program object.");
		exit(1);
	}       
	
	err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
	if (err != CL_SUCCESS)
	{
        	printf("Build failed.");

		size_t len;
		char buffer[2048];
		// get the build log
		clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG,
                                  sizeof(buffer), buffer, &len);
		printf("--- Build Log -- \n %s\n",buffer);
		exit(1);
	}

	kernel = clCreateKernel(program, "rmnoise", &err);
	if (err != CL_SUCCESS)
	{	
		printf("Unable to create kernel object.");
		exit(1);
	}

	// create buffer objects of kernel function
	imageCL = clCreateBuffer(context, CL_MEM_READ_ONLY, sizeof(float)*height*width, NULL, NULL);
	imageCLOUT = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(float)*height*width, NULL, NULL);
	if(!imageCL || !imageCLOUT)
	{
		printf("Error: Failed to allocate device memory!\n");
		exit(1);
	}

	// Write into compute device memory
	err = clEnqueueWriteBuffer(command_queue, imageCL, CL_TRUE, 0, sizeof(float)*height*width, 
					im, 0, NULL, NULL);
	if(err != CL_SUCCESS)
	{
		printf("Error: Failed to write tex to source array!\n");
		exit(1);
	}

	// set the kernel arguments
	if(( clSetKernelArg(kernel, 0, sizeof(cl_mem), &imageCL) ||
		clSetKernelArg(kernel, 1, sizeof(cl_mem), &imageCLOUT) ||
		clSetKernelArg(kernel, 2, sizeof(float), &thredshold) ||
		clSetKernelArg(kernel, 3, sizeof(int), &window_size) ||
		clSetKernelArg(kernel, 4, sizeof(int), &height) ||
		clSetKernelArg(kernel, 5, sizeof(int), &width)) != CL_SUCCESS)
	{
		printf("Unable to set kernel arguments. Error code=%d\n", err);
		exit(1);
	}

	global[0] = height;
	global[1] = width;

	double t0d = getMicroSeconds();
	err = clEnqueueNDRangeKernel(command_queue, kernel, 2, NULL, global, NULL, 0, NULL, NULL);
	double t1d = getMicroSeconds();

	if(err != CL_SUCCESS)
	{
		printf("Unable to enqueue kernel command. Error Code=%d\n", err);
		exit(1);
	}

	clFinish(command_queue);

	// read the output
	err = clEnqueueReadBuffer(command_queue, imageCLOUT, CL_TRUE, 0, sizeof(float)*width*height,
					image_out, 0, NULL, NULL);
	if(err != CL_SUCCESS)
	{
		printf("Error enqueuing read buffer command. Error Code=%d\n", err);
		exit(1);
	}
	
	clReleaseMemObject(imageCL);
	clReleaseProgram(program);
	clReleaseKernel(kernel);
	clReleaseCommandQueue(command_queue);
	clReleaseContext(context);
}
